//******************************************************************
//** 创建人:	王星莅
//** 版  权:	深圳市冰西瓜网络科技有限公司
//** 日  期:	2013-7-17
//** 版  本:	0.1
//** 描  述:	  
//********************************************************************/
typedef enum
{
    WidgetEventTouchDown           = 1 << 0,
    WidgetEventTouchDragInside     = 1 << 1,
    WidgetEventTouchDragOutside    = 1 << 2,
    WidgetEventTouchDragEnter      = 1 << 3,
    WidgetEventTouchDragExit       = 1 << 4,
    WidgetEventTouchUpInside       = 1 << 5,
    WidgetEventTouchUpOutside      = 1 << 6,
    WidgetEventTouchCancel         = 1 << 7,
    WidgetEventDrop                = 1 << 8
}WidgetEvent;

 
typedef enum
{
	/// Widget
	ScriptEventWidgetPushDown  =1,
	ScriptEventWidgetMove,
	ScriptEventWidgetReleaseUp,
	ScriptEventWidgetCancelUp,

	// Scroll
	ScriptEventScrollViewScrollToTop,
	ScriptEventScrollViewScrollToBottom, 
	ScriptEventScrollViewScrollToLeft,
	ScriptEventScrollViewScrollToRight, 

	ScriptEventScrollViewBerthToTop,
	ScriptEventScrollViewBerthToBottom,
	ScriptEventScrollViewBerthToVerticalCenter,
	ScriptEventScrollViewBerthToLeft,
	ScriptEventScrollViewBerthToRight,
	ScriptEventScrollViewBerthToHorizontalCenter,

	// List
	ScriptEventListViewInitChild ,
	ScriptEventListViewUpdateChild,

	// CheckBox 
	ScriptEventCheckBoxSelect,
	ScriptEventCheckBoxUnSelect,

	// UISlider
	ScriptEventUISliderPercentChanged,

}WidgetScriptEvent; 

typedef enum
{
    WidgetStateNone = -1,
    WidgetStateNormal,
    WidgetStateSelected,
    WidgetStateDisabled
}WidgetState;

typedef enum
{
    WidgetTypeWidget,
    WidgetTypeContainer
}WidgetType;

typedef enum
{
    WIDGET_WIDGET,
    WIDGET_ROOTWIDGET,
    WIDGET_CONTAINERWIDGET,
    WIDGET_BUTTON,
    WIDGET_CHECKBOX,
    WIDGET_CONTROLBUTTON,
    WIDGET_GRADIENTPANEL,
    WIDGET_IMAGEVIEW,
    WIDGET_LABEL,
    WIDGET_LABELATLAS,
    WIDGET_LABELBMFONT,
    WIDGET_LISTVIEW,
    WIDGET_LOADINGBAR,
    WIDGET_NODECONTAINER,
    WIDGET_PANEL,
    WIDGET_SCROLLVIEW,
    WIDGET_SLIDER,
    WIDGET_TEXTAREA,
    WIDGET_TEXTBUTTON,
    WIDGET_TEXTFIELD,
    WIDGET_PAGEVIEW
}WidgetName;


class UILayer;
class UIActionNode;

class UIWidget : public CCObject
{
public:
    UIWidget();
    virtual ~UIWidget();
    virtual void releaseResoures();
    static UIWidget* create();
    void initPressState(WidgetState state);
    void setPressState(WidgetState state);
    virtual bool addChild(UIWidget* child);
    virtual bool removeChild(UIWidget* child,bool cleanup);
    virtual void removeFromParentAndCleanup(bool cleanup);
    virtual void removeAllChildrenAndCleanUp(bool cleanup);
    virtual void setWidgetZOrder(int z);
    virtual int getWidgetZOrder();
    virtual void reorderChild(UIWidget* child);
    void setTouchEnable(bool enable, bool containChildren = false);
    void updateChildrenTouchEnable(bool enable, bool containChildren);
    bool isTouchEnable();
    void setUpdateEnable(bool enable);
    bool getUpdateEnable();
    bool isFocus();
    void setFocus(bool fucos);
    virtual void disable(bool containChildren = false);
    virtual void active(bool containChildren = false);
    void updateChildrenActive();
    void updateChildrenDisable();
    virtual bool isActive();
    void updateBeTouchEnable(bool enable);
    void setVisible(bool visible);
    bool isVisible();
    virtual CCRect getRect();
    virtual CCRect getRelativeRect();
    virtual const CCSize& getContentSize(); 
    void getLocationInWindow();
    virtual float getRelativeLeftPos();
    virtual float getRelativeBottomPos();
    virtual float getRelativeRightPos();
    virtual float getRelativeTopPos();
    virtual CCNode* getValidNode();
    CCNode* getContainerNode();
    UIWidget* getWidgetParent();
    UIWidget* getChildByName(const char* name);
    UIWidget* getChildByTag(int tag);
    CCArray* getChildren();
    virtual void addPushDownEvent(CCObject* target,SEL_PushEvent selector);
    virtual void addMoveEvent(CCObject* target,SEL_MoveEvent selector);
    virtual void addReleaseEvent(CCObject* target,SEL_ReleaseEvent selector);
    virtual void addCancelEvent(CCObject* target,SEL_CancelEvent selector);
    //cocos2d property
    void setPosition(const CCPoint &pos);
    virtual void setAnchorPoint(const CCPoint &pt);
    void updateAnchorPoint();
    CCPoint getPosition();
    CCPoint getAnchorPoint();
    virtual void setScale(float scale);
    float getScale();
    virtual void setScaleX(float scaleX);
    float getScaleX();
    virtual void setScaleY(float scaleY);
    float getScaleY();
    virtual void onScaleDirtyChanged();
    virtual void onScaleXDirtyChanged();
    virtual void onScaleYDirtyChanged();
    void setRotation(float rotation);
    float getRotation();
    void setRotationX(float rotationX);
    float getRotationX();
    void setRotationY(float rotationY);
    float getRotationY();
    virtual void setSkewX(float skewX);
    virtual float getSkewX();
    virtual void setSkewY(float skewY);
    virtual float getSkewY();
    virtual void setFlipX(bool flipX){};
    virtual bool isFlipX(){return false;};
    virtual void setFlipY(bool flipY){};
    virtual bool isFlipY(){return false;};
    virtual void setColor(const ccColor3B &color);
    virtual const ccColor3B& getColor();
    virtual void setOpacity(int opacity);
    virtual int getOpacity();
    virtual bool isCascadeOpacityEnabled();
    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
    virtual bool isCascadeColorEnabled();
    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);
    void setBlendFunc(ccBlendFunc blendFunc);
    void ignoreAnchorPointForPosition(bool ignore);
    //cocos action
    virtual void setActionManager(CCActionManager* actionManager);
    virtual CCActionManager* getActionManager();
    CCAction* runAction(CCAction* action);
    void stopAllActions(void);
    void stopAction(CCAction* action);
    void stopActionByTag(int tag);
    CCAction* getActionByTag(int tag);
    
	void setActionTag(int tag);
	int getActionTag();
    
    virtual void setNeedCheckVisibleDepandParent(bool need);
    void didNotSelectSelf();
    virtual void onTouchBegan(CCPoint &touchPoint);
    virtual void onTouchMoved(CCPoint &touchPoint);
    virtual void onTouchEnded(CCPoint &touchPoint);
    virtual void onTouchCancelled(CCPoint &touchPoint);
    virtual void onTouchLongClicked(CCPoint &touchPoint);
    virtual bool isClippingEnable(){return false;};
    virtual void update(float dt){};
    virtual bool pointAtSelfBody(CCPoint &pt);
    bool checkVisibleDependParent(CCPoint &pt);
    bool checkBeVisibleInParent();
    virtual void checkChildInfo(int handleState,UIWidget* sender,CCPoint &touchPoint);
    //widget prop
    virtual float getAbsoluteScaleX();
    virtual float getAbsoluteScaleY();
    virtual bool getAbsoluteVisible();
    virtual void updateChildrenVisibleDirty(bool dirty);
    virtual void updateChildrenOpacityDirty(bool dirty);
    virtual void adaptSize(float xProportion,float yProportion);
    void setCreateFromFile(bool is);
    void setFileDesignSize(const CCSize &size);
    CCSize getFileDesignSize();
    void setUILayer(UILayer* uiLayer);
    void updateChildrenUILayer(UILayer* uiLayer);
    void structureChangedEvent();
    void disableUpdate();
    CCPoint getTouchStartPos();
    CCPoint getTouchMovePos();
    CCPoint getTouchEndPos();
    void setWidgetTag(int tag);
    int getWidgetTag();
    void setName(const char* name);
    const char* getName();
    void setUseMergedTexture(bool useMergedTexture);
    bool getUseMergedTexture();
    WidgetType getWidgetType();
    WidgetName getWidgetName();
    void setBindingAction(UIActionNode* actionNode);
	 
	void addHandleOfControlEvent(LUA_FUNCTION nFunID,WidgetScriptEvent controlEvent);
	void removeHandleOfControlEvent(WidgetScriptEvent controlEvent);

}